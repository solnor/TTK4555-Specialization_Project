function J = Jacobian(a, b, yvec, lvec, k_spring)
    n = size(yvec,1);
    m = size(a,2);

    J = zeros(m,n);
    for i=1:m

        ax = a(1,i);
        ay = a(2,i);
        bx = b(1,i);
        by = b(2,i);
        x     = yvec(1);
        y     = yvec(2);
        theta = yvec(3);
        l = lvec(i);

        k_spring = 1;
        J_x = ...
        -2*k_spring*(    (ax - x - bx*cos(theta) + by*sin(theta))^2        ...
                     +   (y - ay + by*cos(theta) + bx*sin(theta))^2 - l^2) ...
                     * 2*(ax - x - bx*cos(theta) + by*sin(theta));
     
        J_y = ...
         2*k_spring*(   (ax - x - bx*cos(theta) + by*sin(theta))^2         ...
                     +  (y - ay + by*cos(theta) + bx*sin(theta))^2 - l^2)  ...
                     *2*(y - ay + by*cos(theta) + bx*sin(theta));
     
        J_theta = ...
         2*k_spring*(  2*(by*cos(theta) + bx*sin(theta))                   ...
                        *(ax - x - bx*cos(theta) + by*sin(theta))          ...
                     + 2*(bx*cos(theta) - by*sin(theta))                   ...
                        *(y - ay + by*cos(theta) + bx*sin(theta)))         ...
                       *((ax - x - bx*cos(theta) + by*sin(theta))^2        ...
                       + (y - ay + by*cos(theta) + bx*sin(theta))^2 - l^2);
        J(i,:) = [J_x J_y J_theta];
    end
end